@startuml
skinparam linetype ortho
skinparam classAttributeIconSize 0
hide circle

package "slowport"{
	class Session{
		- day : DayOfWeek
		- time : TimeOfDay
		- duration : Duration
		- name : String
		- section : String
		- venue : String
		- index : int
		- isRecurring : boolean
		- week : YearWeek

		+ getDay() : DayOfWeek
		+ getTime() : TimeOfDay
		+ getDuration() : Duration
		+ getName() : String
		+ getSection() : String
		+ getVenue() : String
		+ getIndex() : int
		+ getIsRecurring() : boolean
		+ getWeek() : YearWeek
		+ setDay(val : DayOfWeek) : void
		+ setTime(val : TimeOfDay) : void
		+ setDuration(val : Duration) : void
		+ setName(val : String) : void
		+ setSection(val : String) : void
		+ setVenue(val : String) : void
		+ setIndex(val : int) : void
		+ setIsRecurring(val : boolean) : void
		+ setWeek(val : YearWeek) : void
	}

	class Note{
		- week : YearWeek
		- course : String
		- section : String
		- sessionIndex : int
		- note : String
		+ Node(week : YearWeek, course : String, section : String,\
		sessionIndex : int, note : String)
		+ getWeek() : YearWeek
		+ getCourse() : String
		+ getSection() : String
		+ getSessionIndex() : int
		+ getNote() : String
	}

	Note -- Session

	abstract class Criterion{
		+ validate(sessions : List<Session>) : boolean
		+ {abstract} validate(session : Session) : boolean
	}

	Criterion -- Session : isAppliedTo

	class CourseCriterion extends Criterion{
		# course : String
		+ CourseCriterion(course : String)
		+ {abstract} validate(session : Session) : boolean
	}

	class SectionCriterion extends Criterion{
		# section : String
		+ SectionCriterion(section : String)
		+ {abstract} validate(session : Session) : boolean
	}

	class DayCriterion extends Criterion{
		# day : DayOfWeek
		+ DayCriterion(day : DayOfWeek)
		+ {abstract} validate(session : Session) : boolean
	}

	class TimeCriterion extends Criterion{
		# start : TimeOfDay
		# end : TimeOfDay
		+ TimeCriterion(start : TimeOfDay, end : TimeOfDay)
		+ {abstract} validate(session : Session) : boolean
	}

	class NotCriterion extends Criterion{
		- criteria : Criterion
		+ NotCriterion(criteria : Criterion)
		+ validate(session : Session) : boolean
	}

	class AndCriterion extends Criterion{
		- criteria : List<Criterion>
		+ AndCriterion(criteria : List<Criterion>)
		+ validate(session : Session) : boolean
	}

	AndCriterion o-- Criterion

	class OrCriterion extends Criterion{
		- criteria : List<Criterion>
		+ OrCriterion(criteria : List<Criterion>)
		+ validate(session : Session) : boolean
	}

	OrCriterion o-- Criterion

	class Filter{
		- criterion : Criterion
		+ Filter(criterion : Criterion)
		+ filter(sessions : List<Session>) : List<Session>
	}

	Filter o-- Criterion

	class Combinator{
		- criterion : Criterion
		+ Combinator(criterion : Criterion)
		+ combinations(sessions : List<Session>) : List<List<Sessions>>
	}

	Combinator o-- Criterion


	package "db"{
		class Connector{
			- {static} filename() : String
			+ {static} connect() : Connection
		}

		class TimetableDB{
			- {static} queryGetVersions : String
			- {static} queryGetTimetable : String
			- {static} queryAddTimetable : String
			- conn : Connection
			- stmntGetVersions : PreparedStatement
			- stmntGetTimetable : PreparedStatement
			- stmntAddTimetable : PreparedStatement
			- sessions : Map<String, List<Session>>
			+ TimetableDB(conn : Connection)
			+ getVersions() : List<String>
			+ getTimetable(version : String) : String
			+ getSessions(version : String) : List<Session>
			+ addTimetable(version : String, timetable : String) : void
		}

		TimetableDB -- Session : //Manages//

		class SelectionDB{
			- {static} queryGetSelections : String
			- {static} queryRemoveSelection : String
			- {static} queryAddSelection : String
			- conn : Connection
			- timetableStore : TimetableDB
			- stmntGetSelections : PreparedStatement
			- stmntRemoveSelection : PreparedStatement
			- stmntAddSelection : PreparedStatement
			+ SelectionDB(conn : Connection)
			+ getSelected(version : String) : List<Session>
			+ addSelected(session : Session) : void
			+ removeSelected(session : Session) : void
		}

		SelectionDB o- TimetableDB
		SelectionDB -- Session : //Manages//

		class NoteDB{
			- {static} queryGetNotes : String
			- {static} queryGetNotesByCourseSection : String
			- {static} queryAddNote : String
			- conn : Connection
			- stmntGetNotes : PreparedStatement
			- stmntGetNotesByCourseSection : PreparedStatement
			- stmntAddNote : PreparedStatement
			+ NoteDB(conn : Connection)
			+ getNotes() : List<Note>
			+ getNote(String course, String section) : List<Note>
			+ addNote(note : Note) : void
			+ removeNote(note : Note) : void
		}

		NoteDB -- Note : //Manages//
	}
}

@enduml
